[
["index.html", "Technology effect timecourses Chapter 1 Preface 1.1 Analyses 1.2 Raw data 1.3 Reproducibility", " Technology effect timecourses Matti Vuorre 2020-10-02 Chapter 1 Preface We study the timecourse of technology effects on adolescent mental health in three large representative datasets. 1.1 Analyses The data analyses are organized into separate R Markdown files. First, there are three files that do preprocessing of the raw datasets (extracting the relevant variables from the raw data). Then, the data is cleaned a bit further and visualized. The main analyses are in the modelling scripts, that build up to the bayesian generalized linear mixed model. The project is organized as a R bookdown project, so you can reproduce all analyses by building the book (e.g. in RStudio click the “Build Book” button). (Be advised, though, that the Bayesian GLMMs take a very long time to run [many days]). The results are rendered to docs/index.html and can be viewed in a web browser. 1.2 Raw data The datasets’ Terms of Use prevent us for sharing the data files here, so you must download the raw data yourself. Get the data as follows so it is in the format expected by our code: Monitoring the Future Monitoring the Future (MTF) Public-Use Cross-Sectional Datasets https://www.icpsr.umich.edu/icpsrweb/ICPSR/series/35 Download each year’s data in Stata format to data-raw/mtf/ Unzip each file so that you end up with directories like data-raw/mtf/ICPSR_xxxxx Understanding society Understanding Society: Waves 1-9, 2009-2018 https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=6614 http://doi.org/10.5255/UKDA-SN-6614-13 Download the SPSS format data into data-raw/us/ Unzip the file so that you end up with data-raw/us/UKDA-6614-spss/ Youth Risk Behavior Survey The combined National YRBS data https://www.cdc.gov/healthyyouth/data/yrbs/data.htm Download the National ASCII format data and the associated SPSS syntax to data-raw/yrbs/ Process the ASCII file in place with the SPSS syntax file, so you end up with a file data-raw/yrbs/sadc_2017_national.sav 1.3 Reproducibility library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## knitr 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["mtf-preprocessing.html", "Chapter 2 MTF preprocessing 2.1 Save to disk", " Chapter 2 MTF preprocessing Get list of individual data files’ names MTFfiles &lt;- list.files( path = &quot;data-raw/mtf/&quot;, pattern = &quot;\\\\.dta$&quot;, recursive = TRUE, full.names = TRUE ) After this, we have to list all the variables we want to examine in our study. We should do this by using labels of variables which can be found in the codebooks. The reason we’re doing this is because label naming of the MTF dataset remained more or less consistent throughout the years, while variable naming isn’t consistent. Therefore, we can merge the data from different years by using labels, but not by using variable names themselves. For now, let’s go with the following variables: vars &lt;- c(&quot;YEAR OF&quot;, &quot;S SEX&quot;, &quot;s SEX&quot;, &quot;WHAT GRADE LEVL&quot;, &quot;VRY HPY THS DAY&quot;, &quot;SATISFD W MYSELF&quot;, &quot;LIFE MEANINGLESS&quot;, &quot;I ENJOY LIFE&quot;, &quot;HOPELESS&quot;, &quot;GOOD TO BE ALIVE&quot;, &quot;FUTR R LIFE WRSE&quot;, &quot;AM PRSN OF WORTH&quot;, &quot;DO WELL AS OTHRS&quot;, &quot;MUCH TO B PROUD&quot;, &quot;I AM NO GOOD&quot;, &quot;I DO WRONG THING&quot;, &quot;MY LIFE NT USEFL&quot;, &quot;POS ATT TWD SELF&quot;, &quot;OFTN FEEL LONELY&quot;, &quot;ALWYS SM1 HELP&quot;, &quot;OFTN FL LEFT OUT&quot;, &quot;USLY SM1 TALK TO&quot;, &quot;OFT WSH MOR FRND&quot;, &quot;USLY FRDS BE WTH&quot;, &quot;SAT LIFE AS WHL&quot;, &quot;CMP SATFD&quot;, &quot;PUTR SC&quot;, &quot;PUTR OT&quot;, &quot;PUTR JO&quot;, &quot;DAY HRS WATCH&quot;, &quot;END HRS WATCH&quot;, &quot;W GAMING&quot;, &quot;W INTERNET&quot;, &quot;TV/DAY&quot;, &quot;TV/WKEND&quot;, &quot;WEB FACEBK&quot;, &quot;MYSPC&quot;, &quot;HRS MUSIC&quot;) Before proceeding with the merge, we have to create: An empty dataframe that will contain the merged data after the process is complete, which has the same number of columns as the number of our variables of interest and the columns are named accordingly; MTF &lt;- data.frame(matrix(ncol = length(vars))) colnames(MTF) &lt;- vars A list which will contain the data of interest from separate datafiles before it’s merged; intermediate &lt;- list() A list which will contain the labels of separate datafiles labels &lt;- list() A vector which will contain column numbers of our variables of interest; indices &lt;- vector(&quot;numeric&quot;) A vector which will contain column names of our variables of interest; A vector which will contain column numbers of columns that are unlabelled and should be removed. names &lt;- vector(&quot;character&quot;) Now we can go ahead with the merge. Please see inline comments for detailed descriptions! for (i in 1:length(MTFfiles)) { # Importing the file and adding it to the intermediate list intermediate[[i]] &lt;- read_dta(MTFfiles[i]) # Checking if the Grade variable is present in the file; if not, it&#39;s 12th grade if (any(grepl(&quot;WHAT GRADE LEVL&quot;, unlist(var_label(intermediate[[i]])))) == F) { intermediate[[i]][, (ncol(intermediate[[i]]) + 1)] &lt;- 12 var_label(intermediate[[i]][ncol(intermediate[[i]])]) &lt;- &quot;WHAT GRADE LEVL&quot; } # Extracting labels while making sure that unlabelled columns are not dropped from the indexing labels[[i]] &lt;- var_label(intermediate[[i]]) labels[[i]][sapply(labels[[i]], is.null)] &lt;- NA labels[[i]] &lt;- unlist(labels[[i]]) for (j in 1:length(vars)) { # Extracting the column numbers of variables of interest indices &lt;- c(indices, grep(vars[j], labels[[i]])) # Extracting the column names of variables of interest names &lt;- c(names, regmatches(labels[[i]], regexpr(vars[j], labels[[i]]))) } # Removing all variables from the file except those we have chosen intermediate[[i]] &lt;- intermediate[[i]][, indices] # Assigning labels as variable names so data can be merged colnames(intermediate[[i]]) &lt;- names # Cleaning the vectors indices &lt;- vector(&quot;numeric&quot;) names &lt;- vector(&quot;character&quot;) # Remove value labels so can be merged intermediate[[i]] &lt;- zap_labels(intermediate[[i]]) } # Merging the data in the main dataframe MTF &lt;- plyr::rbind.fill(intermediate) After merging the files, there are some leftover things we still have to do * Variables with the labels ‘SAT LIFE AS WHL’ and ‘CMP SATFD’ are actually the same variable and they should be merged; * The same goes for variables named ‘WEB FACEBK’ and ‘MYSPC’; MTF$`SAT LIFE AS WHL` &lt;- rowSums(MTF[, c(&quot;SAT LIFE AS WHL&quot;, &quot;CMP SATFD&quot;)], na.rm = T) MTF &lt;- subset(MTF, select = -`CMP SATFD`) vars &lt;- vars[-26] The above also applies to variables with the labels ‘S SEX’ and ‘s SEX’; MTF$`S SEX` &lt;- rowSums(MTF[, c(&quot;S SEX&quot;, &quot;s SEX&quot;)], na.rm = T) MTF &lt;- subset(MTF, select = -`s SEX`) vars &lt;- vars[-3] And the variables ‘WEB FACEBK’ and ‘MYSPC’ MTF$`WEB FACEBK` &lt;- rowSums(MTF[, c(&quot;WEB FACEBK&quot;, &quot;MYSPC&quot;)], na.rm = T) MTF &lt;- subset(MTF, select = -MYSPC) vars &lt;- vars[-35] Numerical values which indicate various types of missing data have to be removed (i.e., coded as NA); MTF[MTF == 0] &lt;- NA MTF[MTF == 8] &lt;- NA MTF[MTF == 9] &lt;- NA MTF[MTF == -9] &lt;- NA MTF[MTF == -8] &lt;- NA Cases which contain data only for 3 variables (year of administration, gender and grade) have to be removed; MTF &lt;- MTF[!rowSums(is.na(MTF[, c(4:length(vars))])) == (length(vars) - 3), ] Cases which have unidentified labels for the Grade variable (3, 5, 6 and 7) will be dropped; MTF &lt;- subset(MTF, `WHAT GRADE LEVL` == 2 | `WHAT GRADE LEVL` == 4 | `WHAT GRADE LEVL` == 12) Cases which have missing values in the Year variable should be dropped; MTF &lt;- drop_na(MTF, `YEAR OF`) Cases which have unidentified labels for the Sex variable (3, 4, 5, 6 and 7) will be dropped; prop.table(table(MTF$`S SEX`, useNA = &quot;always&quot;)) MTF &lt;- subset(MTF, `S SEX` == 1 | `S SEX` == 2) Initial row numbers should be dropped – convert to tibble takes care of this MTF &lt;- as_tibble(MTF) Values of years which were coded using only last two digits (e.g. 92 instead of 1992) have to be corrected; MTF$`YEAR OF` &lt;- recode(MTF$`YEAR OF`, &quot;76=1976;77=1977;78=1978;79=1979;80=1980;81=1981;82=1982;83=1983;84=1984;85=1985;86=1986;87=1987;88=1988;89=1989;90=1990;91=1991;92=1992;93=1993;94=1994;95=1995;96=1996;97=1997;98=1998&quot;) Sex variable has to be recoded from 1 and 2 to Male and Female, respectively; MTF$`S SEX`[MTF$`S SEX` == 1] &lt;- &quot;Male&quot; MTF$`S SEX`[MTF$`S SEX` == 2] &lt;- &quot;Female&quot; In the Grade variable, values of 2 and 4 have to ve recoded to 8 and 10, respectively; MTF$`WHAT GRADE LEVL` &lt;- recode(MTF$`WHAT GRADE LEVL`, &quot;2=8;4=10&quot;) Labels have to be removed from the data (we’ll add new, more meaningful ones later); All unnecessary variables which were used in the merging process have to be removed to save memory and space; rm(i, indices, j, labels, MTFfiles, vars, names, intermediate) Sex will be turned to factor; MTF$`S SEX` &lt;- as.factor(MTF$`S SEX`) Convert grade to approximate age (age = grade + 5) MTF$`WHAT GRADE LEVL` &lt;- MTF$`WHAT GRADE LEVL` + 5 We will sort the data by year of administration. MTF &lt;- arrange(MTF, `YEAR OF`) Rename variables colnames(MTF) &lt;- c(&quot;Year&quot;, &quot;Sex&quot;, &quot;Age&quot;, &quot;H&quot;, &quot;S&quot;, &quot;SE_R_1&quot;, &quot;SE_R_7&quot;, &quot;SE_R_4&quot;, &quot;SE_R_5&quot;, &quot;SE_R_2&quot;, &quot;D_B_1&quot;, &quot;D_B_2&quot;, &quot;SE_R_10&quot;, &quot;F&quot;, &quot;TV&quot;, &quot;L_MTF_1&quot;, &quot;L_MTF_2&quot;, &quot;L_MTF_3&quot;, &quot;L_MTF_4&quot;, &quot;L_MTF_5&quot;, &quot;L_MTF_6&quot;, &quot;D_B_3&quot;, &quot;D_B_4&quot;, &quot;D_B_5&quot;, &quot;D_B_6&quot;, &quot;TV/WEEKEND&quot;, &quot;COMPUTER/SCHOOL&quot;, &quot;COMPUTER/OTHER&quot;, &quot;COMPUTER JOB&quot;, &quot;INTERNET/WEEK&quot;, &quot;GAMING/WEEK&quot;, &quot;SM&quot;, &quot;music&quot;, &quot;SCREENTIME/WEEKDAY&quot;, &quot;SCREENTIME/WEEKEND&quot;) Let’s also recode the items, so that all the responses indicate higher development of the construct - higher self-esteem, higher loneliness, more depressive symptoms. We’ll also assign labels to those variables. MTF$SE_R_5 &lt;- recode(MTF$SE_R_5, &quot;1=5;2=4;4=2;5=1&quot;) MTF$SE_R_2 &lt;- recode(MTF$SE_R_2, &quot;1=5;2=4;4=2;5=1&quot;) MTF$L_MTF_2 &lt;- recode(MTF$L_MTF_2, &quot;1=5;2=4;4=2;5=1&quot;) MTF$L_MTF_4 &lt;- recode(MTF$L_MTF_4, &quot;1=5;2=4;4=2;5=1&quot;) MTF$L_MTF_6 &lt;- recode(MTF$L_MTF_6, &quot;1=5;2=4;4=2;5=1&quot;) MTF$D_B_4 &lt;- recode(MTF$D_B_4, &quot;1=5;2=4;4=2;5=1&quot;) MTF$D_B_6 &lt;- recode(MTF$D_B_6, &quot;1=5;2=4;4=2;5=1&quot;) Remove data before 1991 because it only includes 12th graders (and thus if you include it, any change over time in the aggregate may just reflect a change from 12th graders to mean(8th grade, 10th grade, 12th grade)…) MTF &lt;- filter(MTF, Year &gt; 1990) Focus on individuals 15 years old or younger MTF &lt;- filter(MTF, Age &lt;= 15) Aggregate, rename, recode MTF &lt;- MTF %&gt;% # Select variables select( Year, Sex, TV, SM, contains(&quot;D_B_&quot;) ) %&gt;% mutate( Depression = rowMeans(select(., starts_with(&quot;D_B_&quot;)), na.rm = TRUE) ) contrasts(MTF$Sex) &lt;- matrix(c(.5, -.5)) We’re not going to do anything with rows where all D_B_ items were missing, so we drop those from the data MTF &lt;- drop_na(MTF, Depression) 2.1 Save to disk saveRDS(MTF, &quot;data/mtf.rds&quot;) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## knitr 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["us-preprocessing.html", "Chapter 3 US preprocessing 3.1 Year 3.2 Strengths and difficulties 3.3 Save file", " Chapter 3 US preprocessing # Function to read adolescents&#39; data from one file read_adolescent_data &lt;- function(filename){ # Select relevant variables, define NAs (any negative numbers), remove &quot;yp&quot; from the beginning of variable names dataset &lt;- read_spss(filename) dataset &lt;- dataset %&gt;% select(-ends_with(&quot;_sex&quot;)) %&gt;% rename_all(~str_replace(., &quot;yp&quot;, &quot;&quot;)) %&gt;% select( contains(&quot;pidp&quot;), # Participant ID ends_with(&quot;age_dv&quot;), # Participant age ends_with(&quot;socweb&quot;), # Do you have social media profile? ends_with(&quot;netcht&quot;), # Hours using social media on weekdays ends_with(&quot;tvvidhrs&quot;), # TV on weekdays (all waves) contains(&quot;sdq&quot;), # Strengths and difficulties -ends_with(&quot;_orig&quot;), -ends_with(&quot;sdqes_dv&quot;), -ends_with(&quot;sdqcp_dv&quot;), -ends_with(&quot;sdqha_dv&quot;), -ends_with(&quot;sdqpp_dv&quot;), -ends_with(&quot;sdqps_dv&quot;), -ends_with(&quot;sdqtd_dv&quot;) ) is.na(dataset[, ]) &lt;- dataset[, ] &lt; 0 #define NAs # Remove dataset indicator letter from variable names so that datasets can be merged names(dataset) &lt;- str_remove(names(dataset), &quot;[a-z]_&quot;) # Get rid of number labels dataset &lt;- zap_labels(dataset) return(dataset) } # Load the adolescent data from the folders downloaded from the UK data service. files_adolescent &lt;- list.files(&quot;data-raw/us/&quot;, pattern = &quot;_youth.sav&quot;, recursive = TRUE, full.names = TRUE) files_adolescent &lt;- files_adolescent[str_detect(files_adolescent, &quot;ukhls&quot;)] data &lt;- map(files_adolescent, read_adolescent_data) # Combine adolescent data from different waves (files) into long format # Removes SPSS labels from variables &amp; values data &lt;- bind_rows(data, .id = &quot;wave&quot;) # Exclude any teenagers from the adolescent data that are under 10 or over 15 data &lt;- data %&gt;% filter(between(age_dv, 10, 15)) %&gt;% select(-age_dv) # Get sex from &quot;stable characteristics&quot; file # In Understanding Society that have a specific file &quot;ukhls_wx/xwavedat.sav&quot; which indicates stable characteristics of participants in the survey. We prefer to use this for sex because it is derived from multiple interviews and checked for consistency. data_stable &lt;- list.files( &quot;data-raw/us/&quot;, pattern = &quot;xwavedat.sav&quot;, recursive = TRUE, full.names = TRUE ) %&gt;% read_spss(col_select = c(&quot;pidp&quot;, &quot;sex_dv&quot;)) is.na(data_stable[, ]) &lt;- data_stable[, ] &lt; 0 # define NAs as anything under 0 data_stable$sex_dv &lt;- as_factor(data_stable$sex_dv) %&gt;% fct_drop() data_stable &lt;- zap_labels(data_stable) data &lt;- left_join(data, data_stable, by = &quot;pidp&quot;) data &lt;- rename(data, Sex = sex_dv) Sex: Take out (10) inconsistent responses prop.table(table(data$Sex, useNA = &quot;always&quot;)) data &lt;- filter(data, Sex != &quot;inconsistent&quot;) data &lt;- data %&gt;% mutate(Sex = factor(Sex, levels = c(&quot;Female&quot;, &quot;Male&quot;))) table(data$Sex, useNA = &quot;always&quot;) # Contrast code sex contrasts(data$Sex) &lt;- matrix(c(.5, -.5)) # Rename variables data &lt;- data %&gt;% rename( socialmedia = socweb, socialmediaamount = netcht, TV = tvvidhrs ) We first clean and recode the social media use variable. This variable is complicated as there was a mistake on the side of Understanding Society, who were inconsistent in how they directed children and adults through the study in different years. Sometimes those who said they dont use social media on “netcht” were automatically coded as none on “socweb” and sometimes this wasnt the case. There is no easy solution for this, so we went with a recoding solution detailed below. If a participant said they do not own a social media account or they dont use social media to interact with friends we coded them as 1, for the rest of the participants we took their netcht score. This creates the following scale, which is ordinal in nature: 1 = None, 2 = Less than an hour, 3 = 1-3 hours, 4 = 4-6 hours, 5 = 7 or more hours # set 9 to NA to revert coding error is.na(data[, c(&quot;socialmediaamount&quot;, &quot;socialmedia&quot;)]) &lt;- data[, c(&quot;socialmediaamount&quot;, &quot;socialmedia&quot;)] == 9 data$socialmedia &lt;- ifelse((data$socialmedia == 2 | data$socialmediaamount == 1), 1, ifelse(data$socialmediaamount == 2, 2, ifelse(data$socialmediaamount == 3, 3, ifelse(data$socialmediaamount == 4, 4, ifelse(data$socialmediaamount == 5, 5, NA))))) data &lt;- data %&gt;% select(-socialmediaamount) data &lt;- rename(data, SM = socialmedia) 3.1 Year # Convert wave to year # Waves 1-9 to years 2009 -&gt; data &lt;- rename(data, Year = &quot;wave&quot;) data$Year &lt;- as.numeric(data$Year) + 2008 3.2 Strengths and difficulties Our main outcome. It is only recorded every second year so we take out the years where it was not recorded. data &lt;- data %&gt;% # SDQ only measured in these waves filter(Year %in% c(2009, 2011, 2013, 2015, 2017)) Recode: Greater values indicate greater difficulties data &lt;- data %&gt;% mutate_at( paste0(&quot;sdq&quot;, c(&quot;a&quot;, &quot;d&quot;, &quot;g&quot;, &quot;i&quot;, &quot;k&quot;, &quot;n&quot;, &quot;q&quot;, &quot;t&quot;, &quot;u&quot;, &quot;y&quot;)), function(x) 4 - x ) SDQ subscales: http://sdqinfo.org/c9.html sdq_emo &lt;- c(&quot;sdqc&quot;, &quot;sdqh&quot;, &quot;sdqm&quot;, &quot;sdqp&quot;, &quot;sdqx&quot;) sdq_con &lt;- c(&quot;sdqe&quot;, &quot;sdqg&quot;, &quot;sdql&quot;, &quot;sdqr&quot;, &quot;sdqv&quot;) # Compute means of two subscales data &lt;- data %&gt;% mutate( Emotion = rowMeans(select(., all_of(sdq_emo)), na.rm=T), Conduct = rowMeans(select(., all_of(sdq_con)), na.rm=T) ) # Remove all but these two subscales from SDQ variables sdq &lt;- select(data, starts_with(&quot;sdq&quot;)) data &lt;- select(data, !starts_with(&quot;sdq&quot;)) data &lt;- bind_cols( data, sdq %&gt;% select(all_of(sdq_emo), all_of(sdq_con)) ) rm(sdq) 3.3 Save file data &lt;- data %&gt;% # Drop all rows where sex or year is missing drop_na(Sex, Year) # Save file to disk saveRDS(data, &quot;data/us.rds&quot;) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## knitr 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["yrbs-preprocessing.html", "Chapter 4 YRBS preprocessing 4.1 Recode Variables 4.2 Age 4.3 Tech variables 4.4 Sex 4.5 Rename and save", " Chapter 4 YRBS preprocessing # Load data without dichotomized and supplemental items data &lt;- read_spss( &quot;data-raw/yrbs/sadc_2017_national.sav&quot;, col_select = c( year, age, sex, q25:q29, q80, q81, ) ) prop.table(table(data$sex, useNA = &quot;always&quot;)) # Drop cases where age or sex are unknown data &lt;- drop_na(data, age, sex) # Choose appropriate years: 2007-2015 data &lt;- data %&gt;% filter(year &gt; 2006) # Convert SPSS labels to factor labels and remove other SPSS attributes data &lt;- as_factor(data) 4.1 Recode Variables Read about the variables at https://www.cdc.gov/healthyyouth/data/yrbs/pdf/2017/2017_yrbs_sadc_documentation.pdf # Sad/Lonely and Dichotomous suicide variables to numeric (0 = no, 1 = yes) data &lt;- mutate_at(data, vars(q25, q26, q27), ~1 - (as.numeric(.) - 1)) # During the past 12 months, how many times did you actually attempt suicide? data &lt;- mutate(data, q28 = as.numeric(q28) - 1) # This is dichotomized data &lt;- mutate(data, q28 = ifelse(q28==0, 0, 1)) # If you attempted suicide during the past 12 months, did any attempt result in an injury, poisoning, or overdose that had to be treated by a doctor or nurse? data &lt;- mutate( data, q29 = factor(q29, levels = c(&quot;Did not attempt suicide&quot;, &quot;No&quot;, &quot;Yes&quot;)), q29 = as.numeric(q29)-1 ) Aggregate data &lt;- data %&gt;% mutate( Suicide = rowMeans(select(., q25:q28), na.rm=T) ) 4.2 Age # Recode age as continuous with correct values # Note: 12 and 18 include younger/older individuals data &lt;- mutate(data, age = as.numeric(age) + 11) # Focus on individuals 15 years old or younger data &lt;- filter(data, age &lt;= 15) data &lt;- select(data, -age) 4.3 Tech variables # Convert tech variable to numeric data &lt;- mutate_at(data, vars(q80, q81), ~as.numeric(.)) 4.4 Sex contrasts(data$sex) &lt;- matrix(c(.5, -.5)) 4.5 Rename and save # Rename data &lt;- data %&gt;% rename( Year = year, Sex = sex, TV = q80, DV = q81, sad_lonely = q25, suicide_1 = q26, suicide_2 = q27, suicide_3 = q28, suicide_4 = q29, ) data # Save data to disk saveRDS(data, &quot;data/yrbs.rds&quot;) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## knitr 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["data-descriptives.html", "Chapter 5 Data descriptives 5.1 Data 5.2 Figures", " Chapter 5 Data descriptives 5.1 Data mtf &lt;- read_rds(&quot;data/mtf.rds&quot;) us &lt;- read_rds(&quot;data/us.rds&quot;) yrbs &lt;- read_rds(&quot;data/yrbs.rds&quot;) 5.1.1 Sample sizes and years Sample sizes per dataset are the number of rows that include the outcome variable (there are two for US). The total sample size in the entire manuscript is the sum without US-emotion (including both US outcomes would duplicate its N). tibble( mtf = drop_na(mtf, Depression) %&gt;% nrow, us_conduct = drop_na(us, Conduct) %&gt;% nrow, us_emotion = drop_na(us, Emotion) %&gt;% nrow, yrbs = drop_na(yrbs, Suicide) %&gt;% nrow ) %&gt;% mutate(total = mtf + us_conduct + yrbs) %&gt;% mutate(across(.fns = ~comma(.))) %&gt;% kable() mtf us_conduct us_emotion yrbs total 380,924 19,190 19,184 30,447 430,561 Actual sample sizes used in analyses are the intersections of non-missing values for the two variables (outcome, technology) used in each model. doit &lt;- function(data, name, x, y) { data &lt;- data %&gt;% drop_na(all_of(x), all_of(y)) data %&gt;% count(Sex) %&gt;% pivot_wider(names_from = Sex, values_from = n) %&gt;% mutate(Total = Female + Male) %&gt;% mutate( across( c(Female, Male), ~str_glue(&quot;{comma(.)} ({percent(./Total)})&quot;) ) ) %&gt;% mutate(across(where(is.numeric), ~comma(.))) %&gt;% mutate(Years = paste(range(data$Year), collapse = &quot; - &quot;)) %&gt;% mutate(Dataset = name, Technology = x, Outcome = y) %&gt;% select(Dataset, Technology, Outcome, Years, Total, Female, Male) } bind_rows( doit(mtf, &quot;MTF&quot;, &quot;TV&quot;, &quot;Depression&quot;), doit(mtf, &quot;MTF&quot;, &quot;SM&quot;, &quot;Depression&quot;), doit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Emotion&quot;), doit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Emotion&quot;), doit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Conduct&quot;), doit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Conduct&quot;), doit(yrbs, &quot;YRBS&quot;, &quot;TV&quot;, &quot;Suicide&quot;), doit(yrbs, &quot;YRBS&quot;, &quot;DV&quot;, &quot;Suicide&quot;) ) %&gt;% arrange(Dataset, Technology, Outcome) %&gt;% kable() Dataset Technology Outcome Years Total Female Male MTF SM Depression 2009 - 2017 120,265 61,792 (51%) 58,473 (49%) MTF TV Depression 1991 - 2017 367,444 191,859 (52%) 175,585 (48%) US SM Conduct 2009 - 2017 18,815 9,434 (50%) 9,381 (50%) US SM Emotion 2009 - 2017 18,811 9,432 (50%) 9,379 (50%) US TV Conduct 2009 - 2017 19,079 9,554 (50%) 9,525 (50%) US TV Emotion 2009 - 2017 19,074 9,552 (50%) 9,522 (50%) YRBS DV Suicide 2007 - 2017 29,450 15,424 (52%) 14,026 (48%) YRBS TV Suicide 2007 - 2017 29,433 15,422 (52%) 14,011 (48%) 5.1.2 Missingness mtf_db_na &lt;- rowSums(is.na(select(mtf, starts_with(&quot;D_B_&quot;)))) kable(prop.table(table(mtf_db_na)), digits = 3) mtf_db_na Freq 0 0.949 1 0.027 2 0.006 3 0.005 4 0.007 5 0.007 us_sdq_na &lt;- rowSums(is.na(select(us, starts_with(&quot;sdq&quot;)))) kable(prop.table(table(us_sdq_na)), digits = 3) us_sdq_na Freq 0 0.958 1 0.025 2 0.004 3 0.001 4 0.001 5 0.000 6 0.001 7 0.000 8 0.000 9 0.000 10 0.010 5.1.3 Outcomes mtf %&gt;% select(starts_with(&quot;D_B_&quot;)) %&gt;% psych::alpha() %&gt;% summary ## ## Reliability analysis ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.85 0.85 0.84 0.48 5.5 0.00039 2 0.95 0.44 cor( select(mtf, starts_with(&quot;D_B_&quot;)), use = &quot;pairwise.complete.obs&quot; ) %&gt;% round(2) ## D_B_1 D_B_2 D_B_3 D_B_4 D_B_5 D_B_6 ## D_B_1 1.00 0.60 0.48 0.34 0.56 0.34 ## D_B_2 0.60 1.00 0.57 0.43 0.63 0.45 ## D_B_3 0.48 0.57 1.00 0.39 0.59 0.39 ## D_B_4 0.34 0.43 0.39 1.00 0.38 0.64 ## D_B_5 0.56 0.63 0.59 0.38 1.00 0.40 ## D_B_6 0.34 0.45 0.39 0.64 0.40 1.00 sdq_con &lt;- c(&quot;sdqe&quot;, &quot;sdqg&quot;, &quot;sdql&quot;, &quot;sdqr&quot;, &quot;sdqv&quot;) sdq_emo &lt;- c(&quot;sdqc&quot;, &quot;sdqh&quot;, &quot;sdqm&quot;, &quot;sdqp&quot;, &quot;sdqx&quot;) us %&gt;% select(all_of(sdq_con)) %&gt;% psych::alpha() %&gt;% summary ## ## Reliability analysis ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.62 0.62 0.58 0.25 1.6 0.0041 1.4 0.36 0.24 us %&gt;% select(all_of(sdq_emo)) %&gt;% psych::alpha() %&gt;% summary ## ## Reliability analysis ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.69 0.69 0.65 0.31 2.2 0.0035 1.6 0.45 0.29 cor( select(us, all_of(sdq_con)), use = &quot;pairwise.complete.obs&quot; ) %&gt;% round(2) ## sdqe sdqg sdql sdqr sdqv ## sdqe 1.00 0.30 0.34 0.34 0.16 ## sdqg 0.30 1.00 0.23 0.24 0.15 ## sdql 0.34 0.23 1.00 0.28 0.21 ## sdqr 0.34 0.24 0.28 1.00 0.23 ## sdqv 0.16 0.15 0.21 0.23 1.00 cor( select(us, all_of(sdq_emo)), use = &quot;pairwise.complete.obs&quot; ) %&gt;% round(2) ## sdqc sdqh sdqm sdqp sdqx ## sdqc 1.00 0.26 0.28 0.19 0.21 ## sdqh 0.26 1.00 0.42 0.39 0.39 ## sdqm 0.28 0.42 1.00 0.29 0.30 ## sdqp 0.19 0.39 0.29 1.00 0.37 ## sdqx 0.21 0.39 0.30 0.37 1.00 5.2 Figures mtf %&gt;% pivot_longer(c(TV, SM, Depression)) %&gt;% drop_na(value) %&gt;% add_count(name) %&gt;% mutate(name = str_glue(&quot;{name} (N = {comma(n)})&quot;)) %&gt;% ggplot(aes(Year, value)) + geom_blank() + stat_summary(fun=mean, geom=&quot;line&quot;) + facet_wrap(&quot;name&quot;, scales = &quot;free_y&quot;) us %&gt;% pivot_longer(c(SM, TV, Emotion, Conduct)) %&gt;% drop_na(value) %&gt;% add_count(name) %&gt;% mutate(name = str_glue(&quot;{name} (N = {comma(n, accuracy = 1)})&quot;)) %&gt;% ggplot(aes(Year, value)) + geom_blank() + stat_summary(fun=mean, geom=&quot;line&quot;) + facet_wrap(&quot;name&quot;, scales = &quot;free_y&quot;) yrbs %&gt;% pivot_longer(c(TV, DV, sad_lonely:suicide_3)) %&gt;% drop_na(value) %&gt;% add_count(name) %&gt;% mutate(name = str_glue(&quot;{name} (N = {comma(n)})&quot;)) %&gt;% ggplot(aes(Year, value)) + geom_blank() + stat_summary(fun=mean, geom=&quot;line&quot;) + facet_wrap(&quot;name&quot;, scales = &quot;free_y&quot;) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## backports 1.1.10 2020-09-15 [1] CRAN (R 4.0.2) ## blob 1.2.1 2020-01-20 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## broom * 0.7.0.9001 2020-07-23 [1] Github (tidymodels/broom@7db1139) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.0.0) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## colorspace 1.4-1 2019-03-18 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## DBI 1.1.0 2019-12-15 [1] CRAN (R 4.0.0) ## dbplyr 1.4.4 2020-05-27 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## dplyr * 1.0.2 2020-08-18 [1] CRAN (R 4.0.2) ## ellipsis 0.3.1 2020-05-15 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## forcats * 0.5.0 2020-03-01 [1] CRAN (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2) ## generics 0.0.2 2018-11-29 [1] CRAN (R 4.0.0) ## ggplot2 * 3.3.2 2020-06-19 [1] CRAN (R 4.0.1) ## ggstance * 0.3.4 2020-04-02 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.0.0) ## haven 2.3.1 2020-06-01 [1] CRAN (R 4.0.0) ## highr 0.8 2019-03-20 [1] CRAN (R 4.0.0) ## hms 0.5.3 2020-01-08 [1] CRAN (R 4.0.0) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.0.2) ## jsonlite 1.7.1 2020-09-07 [1] CRAN (R 4.0.2) ## knitr * 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## lattice 0.20-41 2020-04-02 [1] CRAN (R 4.0.2) ## lifecycle 0.2.0 2020-03-06 [1] CRAN (R 4.0.0) ## lubridate 1.7.9 2020-06-08 [1] CRAN (R 4.0.1) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.0.2) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 4.0.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.0.0) ## nlme 3.1-149 2020-08-23 [1] CRAN (R 4.0.2) ## pacman 0.5.1 2019-03-11 [1] CRAN (R 4.0.0) ## pillar 1.4.6 2020-07-10 [1] CRAN (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0) ## psych 2.0.8 2020-09-04 [1] CRAN (R 4.0.2) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.0.0) ## R6 2.4.1 2019-11-12 [1] CRAN (R 4.0.0) ## Rcpp 1.0.5 2020-07-06 [1] CRAN (R 4.0.2) ## readr * 1.3.1 2018-12-21 [1] CRAN (R 4.0.0) ## readxl 1.3.1 2019-03-13 [1] CRAN (R 4.0.0) ## reprex 0.3.0 2019-05-16 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## rstudioapi 0.11 2020-02-07 [1] CRAN (R 4.0.0) ## rvest 0.3.6 2020-07-25 [1] CRAN (R 4.0.2) ## scales * 1.1.1 2020-05-11 [1] CRAN (R 4.0.0) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr * 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## tibble * 3.0.3 2020-07-10 [1] CRAN (R 4.0.2) ## tidyr * 1.1.2 2020-08-27 [1] CRAN (R 4.0.2) ## tidyselect 1.1.0 2020-05-11 [1] CRAN (R 4.0.0) ## tidyverse * 1.3.0 2019-11-21 [1] CRAN (R 4.0.0) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.0.0) ## vctrs 0.3.4 2020-08-29 [1] CRAN (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## xml2 1.3.2 2020-04-23 [1] CRAN (R 4.0.0) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["generalized-linear-model.html", "Chapter 6 Generalized Linear Model 6.1 Data 6.2 Yearly correlations figure 6.3 Models 6.4 Results", " Chapter 6 Generalized Linear Model This is a first pass. We model the means of the items of each dataset with OLS regression. 6.1 Data mtf &lt;- read_rds(&quot;data/mtf.rds&quot;) us &lt;- read_rds(&quot;data/us.rds&quot;) yrbs &lt;- read_rds(&quot;data/yrbs.rds&quot;) For US, we also isolate between- and within-person variables. us &lt;- bmlm::isolate(us, &quot;pidp&quot;, &quot;TV&quot;, which = &quot;both&quot;, z = TRUE) us &lt;- bmlm::isolate(us, &quot;pidp&quot;, &quot;SM&quot;, which = &quot;both&quot;, z = TRUE) us &lt;- us %&gt;% select(-TV, -SM) # We focus on between-person relations so rename those back us &lt;- us %&gt;% rename(TV = TV_cb, SM = SM_cb) 6.2 Yearly correlations figure fit_year &lt;- function(data, x, y, name) { data &lt;- data[,c(&quot;Year&quot;, x, y, &quot;Sex&quot;)] names(data) &lt;- c(&quot;Year&quot;, &quot;x&quot;, &quot;y&quot;, &quot;Sex&quot;) data %&gt;% drop_na(x, y) %&gt;% group_by(Year) %&gt;% mutate( x = as.numeric(scale(x)), y = as.numeric(scale(y)) ) %&gt;% group_modify(~broom::tidy(lm(y ~ x*Sex, data = .), conf.int = TRUE)) %&gt;% filter(term==&quot;x&quot;) %&gt;% mutate(Technology = x, Outcome = y, data = name) } x1 &lt;- fit_year(mtf, &quot;TV&quot;, &quot;Depression&quot;, &quot;MTF&quot;) x2 &lt;- fit_year(mtf, &quot;SM&quot;, &quot;Depression&quot;, &quot;MTF&quot;) x3 &lt;- fit_year(yrbs, &quot;TV&quot;, &quot;Suicide&quot;, &quot;YRBS&quot;) x4 &lt;- fit_year(yrbs, &quot;DV&quot;, &quot;Suicide&quot;, &quot;YRBS&quot;) x5 &lt;- fit_year(us, &quot;TV&quot;, &quot;Emotion&quot;, &quot;US&quot;) x6 &lt;- fit_year(us, &quot;TV&quot;, &quot;Conduct&quot;, &quot;US&quot;) x7 &lt;- fit_year(us, &quot;SM&quot;, &quot;Emotion&quot;, &quot;US&quot;) x8 &lt;- fit_year(us, &quot;SM&quot;, &quot;Conduct&quot;, &quot;US&quot;) fits_year &lt;- bind_rows(x1,x2,x3,x4,x5,x6,x7,x8) # Rename device and social media to a similar construct fits_year &lt;- fits_year %&gt;% mutate( Technology = ifelse( Technology %in% c(&quot;SM&quot;, &quot;DV&quot;), &quot;Social media / digital device&quot;, &quot;Television&quot; ) ) fits_year %&gt;% ggplot( aes(Year, estimate, shape = Outcome) ) + geom_hline(yintercept = 0, lty = 2, size = .25) + scale_shape_manual(values = c(15, 16, 21, 22)) + scale_x_continuous( &quot;Year&quot;, breaks = scales::pretty_breaks() ) + scale_y_continuous( &quot;Estimate (±95%CI)&quot;, breaks = scales::pretty_breaks() ) + geom_line( position = position_dodge(.33), size = .25, ) + geom_linerange( position = position_dodge(.33), show.legend = FALSE, aes(ymin = conf.high, ymax = conf.low) ) + geom_point( position = position_dodge(.33), fill = &quot;white&quot;, stroke = 0.75 ) + facet_wrap(&quot;Technology&quot;, scales = &quot;fixed&quot;, ncol = 1) + theme( legend.position = &quot;right&quot;, legend.background = element_rect(fill = NA), legend.key = element_rect(fill = NA), legend.text = element_text(size = 8), legend.box.spacing = unit(0, &quot;cm&quot;) ) ggsave(&quot;Figure1.png&quot;, width = 6, height = 4) 6.3 Models fit &lt;- function(data, name, x, y) { data &lt;- drop_na(data, all_of(x), all_of(y)) # Standardize X and Y data &lt;- mutate(data, across(c(all_of(x), all_of(y)), ~as.numeric(scale(.)))) data &lt;- mutate(data, Year = Year - 2017) ml1 &lt;- lm( str_glue(&quot;{y} ~ Sex * Year * {x}&quot;), data = data ) tibble( data = name, Technology = x, Outcome = y, ml1 = list(ml1) ) } x1 &lt;- fit(yrbs, &quot;YRBS&quot;, &quot;TV&quot;, &quot;Suicide&quot;) x2 &lt;- fit(yrbs, &quot;YRBS&quot;, &quot;DV&quot;, &quot;Suicide&quot;) x3 &lt;- fit(mtf, &quot;MTF&quot;, &quot;TV&quot;, &quot;Depression&quot;) x4 &lt;- fit(mtf, &quot;MTF&quot;, &quot;SM&quot;, &quot;Depression&quot;) x5 &lt;- fit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Emotion&quot;) x6 &lt;- fit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Conduct&quot;) x7 &lt;- fit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Emotion&quot;) x8 &lt;- fit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Conduct&quot;) fits &lt;- bind_rows(x1,x2,x3,x4,x5,x6,x7,x8) # Labels for plots fits &lt;- fits %&gt;% mutate( Technology = ifelse( Technology %in% c(&quot;SM&quot;, &quot;DV&quot;), &quot;Social media / device&quot;, &quot;Television&quot; ) ) 6.4 Results fits %&gt;% mutate(Outcome = fct_rev(Outcome)) %&gt;% mutate(linear = map(ml1, ~tidy(., conf.int=TRUE))) %&gt;% unnest(linear) %&gt;% mutate(Parameter = case_when( term == &quot;Year&quot; ~ &quot;Year&quot;, term %in% c(&quot;TV&quot;, &quot;SM&quot;, &quot;DV&quot;) ~ &quot;Technology&quot;, term %in% c(&quot;Year:TV&quot;, &quot;Year:SM&quot;, &quot;Year:DV&quot;) ~ &quot;Year x Technology&quot; )) %&gt;% drop_na(Parameter) %&gt;% mutate( Parameter = factor(Parameter, levels = c(&quot;Year&quot;, &quot;Technology&quot;, &quot;Year x Technology&quot;)) ) %&gt;% ggplot(aes(estimate, Outcome, shape = Technology, fill = p.value &lt; .05)) + scale_shape_manual(values = c(21, 22)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;black&quot;), guide = FALSE) + scale_x_continuous( &quot;Parameter estimate&quot;, breaks = scales::pretty_breaks(), expand = expansion(.1) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( position = position_dodge2v(.4), aes(xmin = conf.low, xmax = conf.high) ) + geom_point( size = 2, position = position_dodge2v(.4), ) + facet_wrap(&quot;Parameter&quot;, scales = &quot;free_x&quot;) + theme( legend.position = &quot;bottom&quot;, axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) YRBS with separate logistic regressions for each outcome tmp &lt;- yrbs %&gt;% pivot_longer(sad_lonely:suicide_3) tmp_tv &lt;- tmp %&gt;% group_by(name) %&gt;% mutate(TV = as.numeric(scale(TV)), Year = Year-2017) %&gt;% group_modify(~tidy(glm(value ~ Year*TV, family = binomial, data = .), conf.int = TRUE)) %&gt;% filter(term != &quot;(Intercept)&quot;) tmp_dv &lt;- tmp %&gt;% group_by(name) %&gt;% mutate(DV = as.numeric(scale(DV)), Year = Year-2017) %&gt;% group_modify(~tidy(glm(value ~ Year*DV, family = binomial, data = .), conf.int = TRUE)) %&gt;% filter(term != &quot;(Intercept)&quot;) bind_rows(tmp_dv, tmp_tv, .id = &quot;Technology&quot;) %&gt;% mutate(Technology = factor(Technology, labels = c(&quot;DV&quot;, &quot;TV&quot;))) %&gt;% mutate(Parameter = case_when( term == &quot;Year&quot; ~ &quot;Year&quot;, term %in% c(&quot;TV&quot;, &quot;DV&quot;) ~ &quot;Technology&quot;, term %in% c(&quot;Year:TV&quot;, &quot;Year:DV&quot;) ~ &quot;Year x Technology&quot; )) %&gt;% drop_na(Parameter) %&gt;% mutate( Parameter = factor(Parameter, levels = c(&quot;Year&quot;, &quot;Technology&quot;, &quot;Year x Technology&quot;)) ) %&gt;% ggplot(aes(estimate, name, fill = p.value &lt; .05, shape = Technology)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;black&quot;), guide = FALSE) + scale_shape_manual(values = c(21, 22)) + scale_x_continuous( &quot;Parameter estimate&quot;, breaks = scales::pretty_breaks(), expand = expansion(.1) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( position = position_dodge2v(.4), aes(xmin = conf.low, xmax = conf.high) ) + geom_point( size = 2, position = position_dodge2v(.4), ) + facet_wrap(&quot;Parameter&quot;, scales = &quot;free_x&quot;) + theme( legend.position = &quot;bottom&quot;, axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## backports 1.1.10 2020-09-15 [1] CRAN (R 4.0.2) ## blob 1.2.1 2020-01-20 [1] CRAN (R 4.0.0) ## bmlm 1.3.11 2019-02-21 [1] CRAN (R 4.0.0) ## bookdown 0.20 2020-06-23 [1] CRAN (R 4.0.2) ## broom * 0.7.0.9001 2020-07-23 [1] Github (tidymodels/broom@7db1139) ## callr 3.4.4 2020-09-07 [1] CRAN (R 4.0.2) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.0.0) ## cli 2.0.2 2020-02-28 [1] CRAN (R 4.0.0) ## coda 0.19-3 2019-07-05 [1] CRAN (R 4.0.0) ## codetools 0.2-16 2018-12-24 [1] CRAN (R 4.0.2) ## colorspace 1.4-1 2019-03-18 [1] CRAN (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 4.0.0) ## curl 4.3 2019-12-02 [1] CRAN (R 4.0.0) ## DBI 1.1.0 2019-12-15 [1] CRAN (R 4.0.0) ## dbplyr 1.4.4 2020-05-27 [1] CRAN (R 4.0.0) ## digest 0.6.25 2020-02-23 [1] CRAN (R 4.0.0) ## dplyr * 1.0.2 2020-08-18 [1] CRAN (R 4.0.2) ## ellipsis 0.3.1 2020-05-15 [1] CRAN (R 4.0.0) ## emmeans * 1.5.1 2020-09-18 [1] CRAN (R 4.0.2) ## estimability 1.3 2018-02-11 [1] CRAN (R 4.0.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## fansi 0.4.1 2020-01-08 [1] CRAN (R 4.0.0) ## farver 2.0.3 2020-01-16 [1] CRAN (R 4.0.0) ## forcats * 0.5.0 2020-03-01 [1] CRAN (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2) ## generics 0.0.2 2018-11-29 [1] CRAN (R 4.0.0) ## ggplot2 * 3.3.2 2020-06-19 [1] CRAN (R 4.0.1) ## ggstance * 0.3.4 2020-04-02 [1] CRAN (R 4.0.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.0.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.0.0) ## haven 2.3.1 2020-06-01 [1] CRAN (R 4.0.0) ## hms 0.5.3 2020-01-08 [1] CRAN (R 4.0.0) ## htmltools 0.5.0 2020-06-16 [1] CRAN (R 4.0.1) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.0.2) ## inline 0.3.16 2020-09-06 [1] CRAN (R 4.0.2) ## jsonlite 1.7.1 2020-09-07 [1] CRAN (R 4.0.2) ## knitr * 1.30 2020-09-22 [1] CRAN (R 4.0.2) ## lattice 0.20-41 2020-04-02 [1] CRAN (R 4.0.2) ## lifecycle 0.2.0 2020-03-06 [1] CRAN (R 4.0.0) ## loo 2.3.1 2020-07-14 [1] CRAN (R 4.0.2) ## lubridate 1.7.9 2020-06-08 [1] CRAN (R 4.0.1) ## magrittr 1.5 2014-11-22 [1] CRAN (R 4.0.0) ## MASS * 7.3-53 2020-09-09 [1] CRAN (R 4.0.2) ## Matrix 1.2-18 2019-11-27 [1] CRAN (R 4.0.2) ## matrixStats 0.57.0 2020-09-25 [1] CRAN (R 4.0.2) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 4.0.0) ## multcomp * 1.4-13 2020-04-08 [1] CRAN (R 4.0.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.0.0) ## mvtnorm * 1.1-1 2020-06-09 [1] CRAN (R 4.0.0) ## pacman 0.5.1 2019-03-11 [1] CRAN (R 4.0.0) ## pillar 1.4.6 2020-07-10 [1] CRAN (R 4.0.2) ## pkgbuild 1.1.0 2020-07-13 [1] CRAN (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.0.0) ## processx 3.4.4 2020-09-03 [1] CRAN (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] CRAN (R 4.0.2) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.0.0) ## R6 2.4.1 2019-11-12 [1] CRAN (R 4.0.0) ## Rcpp 1.0.5 2020-07-06 [1] CRAN (R 4.0.2) ## RcppParallel 5.0.2 2020-06-24 [1] CRAN (R 4.0.0) ## readr * 1.3.1 2018-12-21 [1] CRAN (R 4.0.0) ## readxl 1.3.1 2019-03-13 [1] CRAN (R 4.0.0) ## reprex 0.3.0 2019-05-16 [1] CRAN (R 4.0.0) ## rlang 0.4.7 2020-07-09 [1] CRAN (R 4.0.2) ## rmarkdown 2.4.0 2020-09-11 [1] Github (cpsievert/rmarkdown@b79fb4d) ## rstan 2.21.3 2020-09-29 [1] Github (stan-dev/rstan@ae36e6f) ## rstudioapi 0.11 2020-02-07 [1] CRAN (R 4.0.0) ## rvest 0.3.6 2020-07-25 [1] CRAN (R 4.0.2) ## sandwich 2.5-1 2019-04-06 [1] CRAN (R 4.0.0) ## scales * 1.1.1 2020-05-11 [1] CRAN (R 4.0.0) ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.0) ## StanHeaders 2.21.0-6 2020-08-16 [1] CRAN (R 4.0.2) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr * 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## survival * 3.2-3 2020-06-13 [1] CRAN (R 4.0.2) ## TH.data * 1.0-10 2019-01-21 [1] CRAN (R 4.0.0) ## tibble * 3.0.3 2020-07-10 [1] CRAN (R 4.0.2) ## tidyr * 1.1.2 2020-08-27 [1] CRAN (R 4.0.2) ## tidyselect 1.1.0 2020-05-11 [1] CRAN (R 4.0.0) ## tidyverse * 1.3.0 2019-11-21 [1] CRAN (R 4.0.0) ## V8 3.2.0 2020-06-19 [1] CRAN (R 4.0.2) ## vctrs 0.3.4 2020-08-29 [1] CRAN (R 4.0.2) ## withr 2.3.0 2020-09-22 [1] CRAN (R 4.0.2) ## xfun 0.18 2020-09-29 [1] CRAN (R 4.0.2) ## xml2 1.3.2 2020-04-23 [1] CRAN (R 4.0.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.0.0) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## zoo 1.8-8 2020-05-02 [1] CRAN (R 4.0.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library "],
["bayesian-generalized-linear-mixed-model.html", "Chapter 7 Bayesian Generalized Linear Mixed Model 7.1 Data 7.2 Models", " Chapter 7 Bayesian Generalized Linear Mixed Model For each dataset and outcome, we fit a GLMM using brms, in order to do full bayesian inference. These models take a while to run. 7.1 Data mtf &lt;- read_rds(&quot;data/mtf.rds&quot;) us &lt;- read_rds(&quot;data/us.rds&quot;) yrbs &lt;- read_rds(&quot;data/yrbs.rds&quot;) For US, we also isolate between- and within-person variables. # Within-person center variables (Vuorre &amp; Bolger, 2017) us &lt;- bmlm::isolate(us, &quot;pidp&quot;, &quot;TV&quot;, which = &quot;both&quot;, z = TRUE) us &lt;- bmlm::isolate(us, &quot;pidp&quot;, &quot;SM&quot;, which = &quot;both&quot;, z = TRUE) us &lt;- us %&gt;% select(-TV, -SM) # We focus on between-person relations so rename those back us &lt;- us %&gt;% rename(TV = TV_cb, SM = SM_cb) YRBS is in long format wrt items yrbs &lt;- yrbs %&gt;% select(-suicide_4, -Suicide) %&gt;% pivot_longer( sad_lonely:suicide_3, names_to = &quot;item&quot;, values_to = &quot;Suicide&quot; ) 7.2 Models 7.2.1 Estimate MTF: Single level model US: Random intercepts for participants. 85% of participants have only 1 or 2 observations, so random slopes without strong priors are not a good idea. YRBS: Full item-specific random effects. fit &lt;- function(data, name, x, y, iter = 1000, chains = 12, cores = 12) { data &lt;- drop_na(data, all_of(x), all_of(y)) data &lt;- mutate(data, Year = Year - 2017) if (name==&quot;YRBS&quot;) { data &lt;- data %&gt;% mutate(across(all_of(x), ~as.numeric(scale(.)))) ml1 &lt;- brm( str_glue(&quot;{y} ~ Sex * Year * {x} + (Sex * Year * {x} | item)&quot;), family = bernoulli(&quot;probit_approx&quot;), control = list(adapt_delta = .98), prior = prior(student_t(9, 0, 1), class = &quot;sd&quot;) + prior(normal(0, 1), class = &quot;b&quot;), inits = &quot;0&quot;, data = data, chains = chains, iter = iter, cores = cores, file = str_glue(&quot;models/brm-{name}-{x}-{y}-ml1-probit&quot;) ) } else if (name==&quot;MTF&quot;) { data &lt;- data %&gt;% mutate(across(c(all_of(x), all_of(y)), ~as.numeric(scale(.)))) ml1 &lt;- brm( str_glue(&quot;{y} ~ Sex * Year * {x}&quot;), control = list(adapt_delta = .9), data = data, chains = chains, iter = iter, cores = cores, file = str_glue(&quot;models/brm-{name}-{x}-{y}-ml1&quot;) ) } else if (name==&quot;US&quot;) { data &lt;- data %&gt;% mutate(across(c(all_of(x), all_of(y)), ~as.numeric(scale(.)))) ml1 &lt;- brm( str_glue(&quot;{y} ~ Sex * Year * {x} + (1 | pidp)&quot;), control = list(adapt_delta = .9), data = data, chains = chains, iter = iter, cores = cores, file = str_glue(&quot;models/brm-{name}-{x}-{y}-ml1&quot;) ) } tibble( data = name, Technology = x, Outcome = y, ml1 = list(ml1) ) } x1 &lt;- fit(yrbs, &quot;YRBS&quot;, &quot;TV&quot;, &quot;Suicide&quot;) x2 &lt;- fit(yrbs, &quot;YRBS&quot;, &quot;DV&quot;, &quot;Suicide&quot;) x3 &lt;- fit(mtf, &quot;MTF&quot;, &quot;TV&quot;, &quot;Depression&quot;) x4 &lt;- fit(mtf, &quot;MTF&quot;, &quot;SM&quot;, &quot;Depression&quot;) x5 &lt;- fit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Emotion&quot;) x6 &lt;- fit(us, &quot;US&quot;, &quot;SM&quot;, &quot;Conduct&quot;) x7 &lt;- fit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Emotion&quot;) x8 &lt;- fit(us, &quot;US&quot;, &quot;TV&quot;, &quot;Conduct&quot;) # Rename variables fits &lt;- bind_rows(x1,x2,x3,x4,x5,x6,x7,x8) fits &lt;- fits %&gt;% mutate( Technology = ifelse( Technology %in% c(&quot;SM&quot;, &quot;DV&quot;), &quot;Social media / device&quot;, &quot;Television&quot; ) ) 7.2.2 Results probs &lt;- c(.025, .1, .9, .975) pars &lt;- fits %&gt;% mutate( p = map( ml1, ~posterior_summary(., pars = &quot;^b_&quot;, probs = probs) %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;Parameter&quot;) %&gt;% tibble() ) ) %&gt;% unnest(p) %&gt;% select(-ml1) b_Year &lt;- pars %&gt;% filter(Parameter == &quot;b_Year&quot;) %&gt;% mutate(Parameter = &quot;Year&quot;) b_Tech &lt;- pars %&gt;% filter(Parameter %in% c(&quot;b_TV&quot;, &quot;b_DV&quot;, &quot;b_SM&quot;)) %&gt;% mutate(Parameter = &quot;Technology&quot;) b_Interaction &lt;- pars %&gt;% filter(Parameter %in% c(&quot;b_Year:TV&quot;, &quot;b_Year:DV&quot;, &quot;b_Year:SM&quot;)) %&gt;% mutate(Parameter = &quot;Year by Technology Interaction&quot;) p1 &lt;- bind_rows(b_Year, b_Tech, b_Interaction) %&gt;% mutate(Outcome = fct_rev(Outcome)) %&gt;% # Fill points based on if 95%CI includes zero mutate( Zero = ifelse( sign(Q2.5) == sign(Estimate) &amp; sign(Estimate) == sign(Q97.5), &quot;*&quot;, &quot;&quot; ) ) %&gt;% mutate( Parameter = factor(Parameter, levels = c(&quot;Year&quot;, &quot;Technology&quot;, &quot;Year by Technology Interaction&quot;)) ) %&gt;% ggplot(aes(Estimate, Outcome, shape = Technology, fill = Zero)) + scale_shape_manual(values = c(21, 22)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;black&quot;), guide = FALSE) + scale_x_continuous( &quot;Parameter estimate&quot;, breaks = scales::pretty_breaks(), expand = expansion(.15) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( aes(xmin = Q2.5, xmax = Q97.5), size = .25, position = position_dodge2v(.5), show.legend = FALSE ) + geom_linerangeh( aes(xmin = Q10, xmax = Q90), size = .75, position = position_dodge2v(.5), show.legend = FALSE ) + geom_point( size = 2, position = position_dodge2v(.5), ) + facet_wrap(&quot;Parameter&quot;, scales = &quot;free_x&quot;, nrow = 1) + theme( legend.position = &quot;right&quot;, axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) ((p1 %+% filter(p1$data, Parameter %in% c(&quot;Technology&quot;)) + theme(axis.title.x = element_blank())) / p1 %+% filter(p1$data, Parameter == &quot;Year by Technology Interaction&quot;)) + plot_layout(guides = &quot;collect&quot;) &amp; theme(legend.position = &quot;right&quot;) ggsave(&quot;Figure2.png&quot;, width = 6, height = 4) # Get YRBS item-specific effects tmp1 &lt;- slice(fits, 1:2) %&gt;% mutate( o = map(ml1, ~rownames_to_column(as.data.frame(coef(.)$item[,,7]))) ) %&gt;% unnest(o) tmp &lt;- fits %&gt;% mutate( p = map( ml1, ~posterior_summary(., pars = &quot;b_Year:[TV|SM|DV]&quot;) %&gt;% as.data.frame() %&gt;% rownames_to_column() %&gt;% tibble() ) ) %&gt;% unnest(p) tmp %&gt;% ggplot(aes(Estimate, Outcome, col = Outcome)) + scale_color_brewer(palette = &quot;Set1&quot;) + scale_x_continuous( &quot;Linear interaction estimate (±95%CI)&quot;, breaks = scales::pretty_breaks(), expand = expansion(.2) ) + geom_vline(xintercept = 0, size = .25, lty = 2) + ggstance::geom_pointrangeh( shape = 21, fill = &quot;white&quot;, fatten = 3, aes(xmin=Q2.5, xmax=Q97.5) ) + # ggstance::geom_pointrangeh( # data = tmp1, aes(xmin = Q2.5, xmax = Q97.5), # size = .25, fatten = 1, # position = ggstance::position_dodge2v(.25) # ) + facet_wrap(&quot;Technology&quot;) + theme( axis.title.y = element_blank(), legend.position = &quot;none&quot;, legend.text = element_text(size = 8) ) # Sex pars %&gt;% filter(str_detect(Parameter, &quot;Sex1:Year:&quot;)) %&gt;% mutate(Parameter = &quot;Sex x Year x Tech&quot;) %&gt;% ggplot(aes(Estimate, Outcome, shape = Technology)) + scale_color_brewer(palette = &quot;Set1&quot;) + scale_x_continuous( &quot;Estimated parameter&quot;, breaks = scales::pretty_breaks(), expand = expansion(.25) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( aes(xmin = Q2.5, xmax = Q97.5), size = .25, position = position_dodge2v(.4), show.legend = FALSE ) + geom_linerangeh( aes(xmin = Q10, xmax = Q90), size = .75, position = position_dodge2v(.4), show.legend = FALSE ) + geom_point( size = 2, position = position_dodge2v(.4) ) + facet_wrap(&quot;Parameter&quot;, scales = &quot;free_x&quot;, nrow = 1) + theme( legend.position = &quot;bottom&quot;, axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib ## abind 1.4-5 2016-07-21 [1] ## assertthat 0.2.1 2019-03-21 [1] ## backports 1.1.10 2020-09-15 [1] ## base64enc 0.1-3 2015-07-28 [1] ## bayesplot 1.7.2 2020-05-28 [1] ## blob 1.2.1 2020-01-20 [1] ## bmlm 1.3.11 2019-02-21 [1] ## bookdown 0.20 2020-06-23 [1] ## bridgesampling 1.0-0 2020-02-26 [1] ## brms * 2.13.10 2020-09-29 [1] ## Brobdingnag 1.2-6 2018-08-13 [1] ## broom 0.7.0.9001 2020-07-23 [1] ## callr 3.4.4 2020-09-07 [1] ## cellranger 1.1.0 2016-07-27 [1] ## cli 2.0.2 2020-02-28 [1] ## coda 0.19-3 2019-07-05 [1] ## codetools 0.2-16 2018-12-24 [1] ## colorspace 1.4-1 2019-03-18 [1] ## colourpicker 1.1.0 2020-09-14 [1] ## crayon 1.3.4 2017-09-16 [1] ## crosstalk 1.1.0.1 2020-03-13 [1] ## curl 4.3 2019-12-02 [1] ## DBI 1.1.0 2019-12-15 [1] ## dbplyr 1.4.4 2020-05-27 [1] ## digest 0.6.25 2020-02-23 [1] ## dplyr * 1.0.2 2020-08-18 [1] ## DT 0.15 2020-08-05 [1] ## dygraphs 1.1.1.6 2018-07-11 [1] ## ellipsis 0.3.1 2020-05-15 [1] ## emmeans 1.5.1 2020-09-18 [1] ## estimability 1.3 2018-02-11 [1] ## evaluate 0.14 2019-05-28 [1] ## fansi 0.4.1 2020-01-08 [1] ## farver 2.0.3 2020-01-16 [1] ## fastmap 1.0.1 2019-10-08 [1] ## forcats * 0.5.0 2020-03-01 [1] ## fs 1.5.0 2020-07-31 [1] ## future * 1.19.1 2020-09-22 [1] ## generics 0.0.2 2018-11-29 [1] ## ggplot2 * 3.3.2 2020-06-19 [1] ## ggridges 0.5.2 2020-01-12 [1] ## ggstance * 0.3.4 2020-04-02 [1] ## globals 0.13.0 2020-09-17 [1] ## glue 1.4.2 2020-08-27 [1] ## gridExtra 2.3 2017-09-09 [1] ## gtable 0.3.0 2019-03-25 [1] ## gtools 3.8.2 2020-03-31 [1] ## haven 2.3.1 2020-06-01 [1] ## hms 0.5.3 2020-01-08 [1] ## htmltools 0.5.0 2020-06-16 [1] ## htmlwidgets 1.5.1 2019-10-08 [1] ## httpuv 1.5.4 2020-06-06 [1] ## httr 1.4.2 2020-07-20 [1] ## igraph 1.2.5 2020-03-19 [1] ## inline 0.3.16 2020-09-06 [1] ## jsonlite 1.7.1 2020-09-07 [1] ## knitr * 1.30 2020-09-22 [1] ## later 1.1.0.1 2020-06-05 [1] ## lattice 0.20-41 2020-04-02 [1] ## lifecycle 0.2.0 2020-03-06 [1] ## listenv 0.8.0 2019-12-05 [1] ## loo 2.3.1 2020-07-14 [1] ## lubridate 1.7.9 2020-06-08 [1] ## magrittr 1.5 2014-11-22 [1] ## markdown 1.1 2019-08-07 [1] ## MASS 7.3-53 2020-09-09 [1] ## Matrix 1.2-18 2019-11-27 [1] ## matrixStats 0.57.0 2020-09-25 [1] ## mime 0.9 2020-02-04 [1] ## miniUI 0.1.1.1 2018-05-18 [1] ## modelr 0.1.8 2020-05-19 [1] ## multcomp 1.4-13 2020-04-08 [1] ## munsell 0.5.0 2018-06-12 [1] ## mvtnorm 1.1-1 2020-06-09 [1] ## nlme 3.1-149 2020-08-23 [1] ## pacman 0.5.1 2019-03-11 [1] ## patchwork * 1.0.1 2020-06-22 [1] ## pillar 1.4.6 2020-07-10 [1] ## pkgbuild 1.1.0 2020-07-13 [1] ## pkgconfig 2.0.3 2019-09-22 [1] ## plyr 1.8.6 2020-03-03 [1] ## prettyunits 1.1.1 2020-01-24 [1] ## processx 3.4.4 2020-09-03 [1] ## promises 1.1.1 2020-06-09 [1] ## ps 1.3.4 2020-08-11 [1] ## purrr * 0.3.4 2020-04-17 [1] ## R6 2.4.1 2019-11-12 [1] ## Rcpp * 1.0.5 2020-07-06 [1] ## RcppParallel 5.0.2 2020-06-24 [1] ## readr * 1.3.1 2018-12-21 [1] ## readxl 1.3.1 2019-03-13 [1] ## reprex 0.3.0 2019-05-16 [1] ## reshape2 1.4.4 2020-04-09 [1] ## rlang 0.4.7 2020-07-09 [1] ## rmarkdown 2.4.0 2020-09-11 [1] ## rsconnect 0.8.16 2019-12-13 [1] ## rstan 2.21.3 2020-09-29 [1] ## rstantools 2.1.1 2020-07-06 [1] ## rstudioapi 0.11 2020-02-07 [1] ## rvest 0.3.6 2020-07-25 [1] ## sandwich 2.5-1 2019-04-06 [1] ## scales 1.1.1 2020-05-11 [1] ## sessioninfo * 1.1.1 2018-11-05 [1] ## shiny 1.5.0 2020-06-23 [1] ## shinyjs 2.0.0 2020-09-09 [1] ## shinystan 2.5.0 2018-05-01 [1] ## shinythemes 1.1.2 2018-11-06 [1] ## StanHeaders 2.21.0-6 2020-08-16 [1] ## stringi 1.5.3 2020-09-09 [1] ## stringr * 1.4.0 2019-02-10 [1] ## survival 3.2-3 2020-06-13 [1] ## TH.data 1.0-10 2019-01-21 [1] ## threejs 0.3.3 2020-01-21 [1] ## tibble * 3.0.3 2020-07-10 [1] ## tidyr * 1.1.2 2020-08-27 [1] ## tidyselect 1.1.0 2020-05-11 [1] ## tidyverse * 1.3.0 2019-11-21 [1] ## V8 3.2.0 2020-06-19 [1] ## vctrs 0.3.4 2020-08-29 [1] ## withr 2.3.0 2020-09-22 [1] ## xfun 0.18 2020-09-29 [1] ## xml2 1.3.2 2020-04-23 [1] ## xtable 1.8-4 2019-04-21 [1] ## xts 0.12.1 2020-09-09 [1] ## yaml 2.2.1 2020-02-01 [1] ## zoo 1.8-8 2020-05-02 [1] ## source ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## Github (paul-buerkner/brms@9f75e2d) ## CRAN (R 4.0.0) ## Github (tidymodels/broom@7dbithub (cpsievert/rmarkdown@b79fb4d) ## CRAN (R 4.0.0) ## Github (stan-dev/rstan@ae36e6fibrary/Frameworks/R.framework/Versions/4.0/Resources/library "],
["latent-variable-models.html", "Chapter 8 Latent Variable Models 8.1 Data 8.2 Models 8.3 Results", " Chapter 8 Latent Variable Models # Parallel processing settings plan(multisession(workers = parallel::detectCores(logical = FALSE))) 8.1 Data mtf &lt;- read_rds(&quot;data/mtf.rds&quot;) us &lt;- read_rds(&quot;data/us.rds&quot;) yrbs &lt;- read_rds(&quot;data/yrbs.rds&quot;) 8.2 Models fit &lt;- function(data, items, x, y, name, missing = &quot;ml&quot;) { # Center year data &lt;- mutate(data, Year = Year - 2017) # Contrast code sex data &lt;- mutate(data, Sex = ifelse(Sex==&quot;Male&quot;, -0.5, 0.5)) # Drop rows with missing predictor data &lt;- drop_na(data, all_of(x)) # Drop rows where all outcome items are missing data &lt;- drop_na(data, all_of(y)) # Mean-center predictors data &lt;- data %&gt;% mutate( across( all_of(x), ~as.numeric(scale(., center = TRUE, scale = FALSE)) ) ) # Ordered? if (name==&quot;YRBS&quot;) { data &lt;- mutate(data, across(sad_lonely:suicide_3, ordered)) missing = &quot;listwise&quot; } # Create interaction terms because lavaan doesn&#39;t know how to newdata &lt;- model.matrix( as.formula(str_glue(&quot;{y} ~ Sex * Year * {x}&quot;)), data = data )[,-1] %&gt;% # Take out the intercept column because it causes lavaan to break as.data.frame() # Interaction term breaks lavaan so change to dot names(newdata) &lt;- str_replace_all(names(newdata), &quot;:&quot;, &quot;.&quot;) # return(newdata) newdata &lt;- cbind(data[,items], newdata) # Combine names of items to a string for lavaan model items_all &lt;- paste0(items, collapse = &quot; + &quot;) # Model strings sem0 &lt;- str_glue(&quot;{y} =~ {items_all}\\n{y} ~ Sex + Year + Sex.Year&quot;) sem1 &lt;- str_glue(&quot;{y} =~ {items_all}\\n{y} ~ Sex + Year + {x} + Sex.Year + Sex.{x} + Year.{x} + Sex.Year.{x}&quot;) ml0 &lt;- sem(sem0, data = newdata, missing = missing) ml1 &lt;- sem(sem1, data = newdata, missing = missing) tibble( data = name, Technology = x, Outcome = y, ml0 = list(ml0), ml1 = list(ml1) ) } x1 %&lt;-% fit(yrbs, c(&quot;sad_lonely&quot;, paste0(&quot;suicide_&quot;, 1:3)), &quot;TV&quot;, &quot;Suicide&quot;, &quot;YRBS&quot;) x2 %&lt;-% fit(yrbs, c(&quot;sad_lonely&quot;, paste0(&quot;suicide_&quot;, 1:3)), &quot;DV&quot;, &quot;Suicide&quot;, &quot;YRBS&quot;) x3 %&lt;-% fit(mtf, paste0(&quot;D_B_&quot;, 1:6), &quot;TV&quot;, &quot;Depression&quot;, &quot;MTF&quot;) x4 %&lt;-% fit(mtf, paste0(&quot;D_B_&quot;, 1:6), &quot;SM&quot;, &quot;Depression&quot;, &quot;MTF&quot;) sdq_con &lt;- c(&quot;sdqe&quot;, &quot;sdqg&quot;, &quot;sdql&quot;, &quot;sdqr&quot;, &quot;sdqv&quot;) sdq_emo &lt;- c(&quot;sdqc&quot;, &quot;sdqh&quot;, &quot;sdqm&quot;, &quot;sdqp&quot;, &quot;sdqx&quot;) x5 %&lt;-% fit(us, sdq_con, &quot;TV&quot;, &quot;Conduct&quot;, &quot;US&quot;) x6 %&lt;-% fit(us, sdq_con, &quot;SM&quot;, &quot;Conduct&quot;, &quot;US&quot;) x7 %&lt;-% fit(us, sdq_emo, &quot;TV&quot;, &quot;Emotion&quot;, &quot;US&quot;) x8 %&lt;-% fit(us, sdq_emo, &quot;SM&quot;, &quot;Emotion&quot;, &quot;US&quot;) # Rename variables fits &lt;- bind_rows(x1,x2,x3,x4,x5,x6,x7,x8) fits &lt;- fits %&gt;% mutate( Technology = ifelse( Technology %in% c(&quot;SM&quot;, &quot;DV&quot;), &quot;Social media / device&quot;, &quot;Television&quot; ) ) %&gt;% arrange(Outcome, Technology) 8.3 Results coefs &lt;- fits %&gt;% mutate(p = map(ml1, ~tidy(., conf.int = TRUE))) %&gt;% unnest(p) %&gt;% filter(op == &quot;~&quot;) %&gt;% separate(term, c(&quot;lhs&quot;, &quot;rhs&quot;), sep = &quot; ~ &quot;) %&gt;% mutate(N = map_dbl(ml1, nobs)) %&gt;% mutate(N = scales::comma(N, accuracy = 1)) coefs %&gt;% mutate(Parameter = str_replace(rhs, &quot;SM|DV|TV&quot;, &quot;Technology&quot;)) %&gt;% mutate(Parameter = str_replace_all(Parameter, &quot;\\\\.&quot;, &quot;:&quot;)) %&gt;% mutate(Parameter = fct_inorder(Parameter)) %&gt;% mutate(Outcome = fct_rev(Outcome)) %&gt;% ggplot(aes(estimate, Outcome, shape = Technology, fill = p.value &lt; 0.05)) + scale_shape_manual(values = c(21, 22)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;black&quot;), guide = FALSE) + scale_x_continuous( &quot;Parameter estimate&quot;, breaks = scales::pretty_breaks(), expand = expansion(.25) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( aes(xmin = conf.low, xmax = conf.high), size = .25, position = position_dodge2v(.4), show.legend = FALSE ) + geom_point( size = 2, position = position_dodge2v(.4), ) + # geom_text( # aes(label = N), size = 2, vjust = 2, # position = position_dodge2v(.4) # ) + facet_wrap(&quot;Parameter&quot;, scales = &quot;free_x&quot;, nrow = 2) + theme( legend.position = c(.875, .25), axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) # Numbers coefs %&gt;% filter(Outcome == &quot;Suicide&quot;, rhs == &quot;TV&quot;) %&gt;% select(data:Outcome, estimate:conf.high) coefs %&gt;% distinct(data, Technology, Outcome, N) ## # A tibble: 8 x 4 ## data Technology Outcome N ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 US Social media / device Conduct 18,815 ## 2 US Television Conduct 19,079 ## 3 MTF Social media / device Depression 120,265 ## 4 MTF Television Depression 367,444 ## 5 US Social media / device Emotion 18,811 ## 6 US Television Emotion 19,074 ## 7 YRBS Social media / device Suicide 24,584 ## 8 YRBS Television Suicide 24,593 Just time fits %&gt;% mutate(p = map(ml0, ~tidy(., conf.int = TRUE))) %&gt;% unnest(p) %&gt;% filter(op == &quot;~&quot;) %&gt;% separate(term, c(&quot;lhs&quot;, &quot;rhs&quot;), sep = &quot; ~ &quot;) %&gt;% # mutate( # Parameter = factor(rhs, levels = c(&quot;Year&quot;, &quot;Technology&quot;, &quot;Year x Technology&quot;)) # ) %&gt;% mutate(Outcome = fct_rev(Outcome)) %&gt;% ggplot(aes(estimate, Outcome, shape = Technology, fill = p.value &lt; 0.05)) + scale_shape_manual(values = c(21, 22)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;black&quot;), guide = FALSE) + scale_x_continuous( &quot;Parameter estimate&quot;, breaks = scales::pretty_breaks(), expand = expansion(.25) ) + geom_vline(xintercept = 0, lty = 2, size = .25) + geom_linerangeh( aes(xmin = conf.low, xmax = conf.high), size = .25, position = position_dodge2v(.4), show.legend = FALSE ) + geom_point( size = 2, position = position_dodge2v(.4), ) + facet_wrap(&quot;rhs&quot;, scales = &quot;free_x&quot;, nrow = 1) + theme( legend.position = &quot;bottom&quot;, axis.title.y = element_blank(), panel.spacing.x = unit(12, &quot;pt&quot;) ) library(sessioninfo) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS Catalina 10.15.7 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_GB.UTF-8 ## ctype en_GB.UTF-8 ## tz Europe/London ## date 2020-10-02 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib ## abind 1.4-5 2016-07-21 [1] ## arm 1.11-2 2020-07-27 [1] ## assertthat 0.2.1 2019-03-21 [1] ## backports 1.1.10 2020-09-15 [1] ## base64enc 0.1-3 2015-07-28 [1] ## bayesplot 1.7.2 2020-05-28 [1] ## BDgraph 2.63 2020-08-26 [1] ## blob 1.2.1 2020-01-20 [1] ## bookdown 0.20 2020-06-23 [1] ## boot 1.3-25 2020-04-26 [1] ## bridgesampling 1.0-0 2020-02-26 [1] ## brms * 2.13.10 2020-09-29 [1] ## Brobdingnag 1.2-6 2018-08-13 [1] ## broom * 0.7.0.9001 2020-07-23 [1] ## callr 3.4.4 2020-09-07 [1] ## carData 3.0-4 2020-05-22 [1] ## cellranger 1.1.0 2016-07-27 [1] ## checkmate 2.0.0 2020-02-06 [1] ## cli 2.0.2 2020-02-28 [1] ## cluster 2.1.0 2019-06-19 [1] ## coda 0.19-3 2019-07-05 [1] ## codetools 0.2-16 2018-12-24 [1] ## colorspace 1.4-1 2019-03-18 [1] ## colourpicker 1.1.0 2020-09-14 [1] ## corpcor 1.6.9 2017-04-01 [1] ## crayon 1.3.4 2017-09-16 [1] ## crosstalk 1.1.0.1 2020-03-13 [1] ## curl 4.3 2019-12-02 [1] ## d3Network 0.5.2.1 2015-01-31 [1] ## data.table 1.13.0 2020-07-24 [1] ## DBI 1.1.0 2019-12-15 [1] ## dbplyr 1.4.4 2020-05-27 [1] ## digest 0.6.25 2020-02-23 [1] ## dplyr * 1.0.2 2020-08-18 [1] ## DT 0.15 2020-08-05 [1] ## dygraphs 1.1.1.6 2018-07-11 [1] ## ellipsis 0.3.1 2020-05-15 [1] ## emmeans 1.5.1 2020-09-18 [1] ## estimability 1.3 2018-02-11 [1] ## evaluate 0.14 2019-05-28 [1] ## fansi 0.4.1 2020-01-08 [1] ## farver 2.0.3 2020-01-16 [1] ## fastmap 1.0.1 2019-10-08 [1] ## fdrtool 1.2.15 2015-07-08 [1] ## forcats * 0.5.0 2020-03-01 [1] ## foreign 0.8-80 2020-05-24 [1] ## Formula 1.2-3 2018-05-03 [1] ## fs 1.5.0 2020-07-31 [1] ## future * 1.19.1 2020-09-22 [1] ## generics 0.0.2 2018-11-29 [1] ## ggplot2 * 3.3.2 2020-06-19 [1] ## ggridges 0.5.2 2020-01-12 [1] ## ggstance * 0.3.4 2020-04-02 [1] ## glasso 1.11 2019-10-01 [1] ## globals 0.13.0 2020-09-17 [1] ## glue 1.4.2 2020-08-27 [1] ## gridExtra 2.3 2017-09-09 [1] ## gtable 0.3.0 2019-03-25 [1] ## gtools 3.8.2 2020-03-31 [1] ## haven 2.3.1 2020-06-01 [1] ## Hmisc 4.4-1 2020-08-10 [1] ## hms 0.5.3 2020-01-08 [1] ## htmlTable 2.1.0 2020-09-16 [1] ## htmltools 0.5.0 2020-06-16 [1] ## htmlwidgets 1.5.1 2019-10-08 [1] ## httpuv 1.5.4 2020-06-06 [1] ## httr 1.4.2 2020-07-20 [1] ## huge 1.3.4.1 2020-04-01 [1] ## igraph 1.2.5 2020-03-19 [1] ## inline 0.3.16 2020-09-06 [1] ## jpeg 0.1-8.1 2019-10-24 [1] ## jsonlite 1.7.1 2020-09-07 [1] ## knitr * 1.30 2020-09-22 [1] ## kutils 1.70 2020-04-29 [1] ## later 1.1.0.1 2020-06-05 [1] ## lattice 0.20-41 2020-04-02 [1] ## latticeExtra 0.6-29 2019-12-19 [1] ## lavaan * 0.6-7 2020-07-31 [1] ## lifecycle 0.2.0 2020-03-06 [1] ## lisrelToR 0.1.4 2013-05-08 [1] ## listenv 0.8.0 2019-12-05 [1] ## lme4 1.1-23 2020-04-07 [1] ## loo 2.3.1 2020-07-14 [1] ## lubridate 1.7.9 2020-06-08 [1] ## magrittr 1.5 2014-11-22 [1] ## markdown 1.1 2019-08-07 [1] ## MASS 7.3-53 2020-09-09 [1] ## Matrix 1.2-18 2019-11-27 [1] ## matrixcalc 1.0-3 2012-09-15 [1] ## matrixStats 0.57.0 2020-09-25 [1] ## mi 1.0 2015-04-16 [1] ## mime 0.9 2020-02-04 [1] ## miniUI 0.1.1.1 2018-05-18 [1] ## minqa 1.2.4 2014-10-09 [1] ## mnormt 2.0.2 2020-09-01 [1] ## modelr 0.1.8 2020-05-19 [1] ## multcomp 1.4-13 2020-04-08 [1] ## munsell 0.5.0 2018-06-12 [1] ## mvtnorm 1.1-1 2020-06-09 [1] ## nlme 3.1-149 2020-08-23 [1] ## nloptr 1.2.2.2 2020-07-02 [1] ## nnet 7.3-14 2020-04-26 [1] ## OpenMx 2.18.1 2020-08-28 [1] ## openxlsx 4.2.2 2020-09-17 [1] ## pacman 0.5.1 2019-03-11 [1] ## pbapply 1.4-3 2020-08-18 [1] ## pbivnorm 0.6.0 2015-01-23 [1] ## pillar 1.4.6 2020-07-10 [1] ## pkgbuild 1.1.0 2020-07-13 [1] ## pkgconfig 2.0.3 2019-09-22 [1] ## plyr 1.8.6 2020-03-03 [1] ## png 0.1-7 2013-12-03 [1] ## prettyunits 1.1.1 2020-01-24 [1] ## processx 3.4.4 2020-09-03 [1] ## promises 1.1.1 2020-06-09 [1] ## ps 1.3.4 2020-08-11 [1] ## psych 2.0.8 2020-09-04 [1] ## purrr * 0.3.4 2020-04-17 [1] ## qgraph 1.6.5 2020-02-21 [1] ## R6 2.4.1 2019-11-12 [1] ## RColorBrewer 1.1-2 2014-12-07 [1] ## Rcpp * 1.0.5 2020-07-06 [1] ## RcppParallel 5.0.2 2020-06-24 [1] ## readr * 1.3.1 2018-12-21 [1] ## readxl 1.3.1 2019-03-13 [1] ## regsem 1.5.2 2020-02-19 [1] ## reprex 0.3.0 2019-05-16 [1] ## reshape2 1.4.4 2020-04-09 [1] ## rjson 0.2.20 2018-06-08 [1] ## rlang 0.4.7 2020-07-09 [1] ## rmarkdown 2.4.0 2020-09-11 [1] ## rockchalk 1.8.144 2019-03-08 [1] ## rpart 4.1-15 2019-04-12 [1] ## rsconnect 0.8.16 2019-12-13 [1] ## Rsolnp 1.16 2015-12-28 [1] ## rstan 2.21.3 2020-09-29 [1] ## rstantools 2.1.1 2020-07-06 [1] ## rstudioapi 0.11 2020-02-07 [1] ## rvest 0.3.6 2020-07-25 [1] ## sandwich 2.5-1 2019-04-06 [1] ## scales 1.1.1 2020-05-11 [1] ## sem 3.1-11 2020-05-19 [1] ## semPlot * 1.1.2 2019-08-20 [1] ## sessioninfo * 1.1.1 2018-11-05 [1] ## shiny 1.5.0 2020-06-23 [1] ## shinyjs 2.0.0 2020-09-09 [1] ## shinystan 2.5.0 2018-05-01 [1] ## shinythemes 1.1.2 2018-11-06 [1] ## StanHeaders 2.21.0-6 2020-08-16 [1] ## statmod 1.4.34 2020-02-17 [1] ## stringi 1.5.3 2020-09-09 [1] ## stringr * 1.4.0 2019-02-10 [1] ## survival 3.2-3 2020-06-13 [1] ## TH.data 1.0-10 2019-01-21 [1] ## threejs 0.3.3 2020-01-21 [1] ## tibble * 3.0.3 2020-07-10 [1] ## tidyr * 1.1.2 2020-08-27 [1] ## tidyselect 1.1.0 2020-05-11 [1] ## tidyverse * 1.3.0 2019-11-21 [1] ## tmvnsim 1.0-2 2016-12-15 [1] ## truncnorm 1.0-8 2018-02-27 [1] ## utf8 1.1.4 2018-05-24 [1] ## V8 3.2.0 2020-06-19 [1] ## vctrs 0.3.4 2020-08-29 [1] ## whisker 0.4 2019-08-28 [1] ## withr 2.3.0 2020-09-22 [1] ## xfun 0.18 2020-09-29 [1] ## XML 3.99-0.5 2020-07-23 [1] ## xml2 1.3.2 2020-04-23 [1] ## xtable 1.8-4 2019-04-21 [1] ## xts 0.12.1 2020-09-09 [1] ## yaml 2.2.1 2020-02-01 [1] ## zip 2.1.1 2020-08-27 [1] ## zoo 1.8-8 2020-05-02 [1] ## source ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## Github (paul-buerkner/brms@9f75e2d) ## CRAN (R 4.0.0) ## Github (tidymodels/broom@7dbithub (cpsievert/rmarkdown@b79fb4d) ## CRAN (R 4.0.0) ## CRAN (R 4.0.2) ## CRAN (R 4.0.0) ## CRAN (R 4.0.0) ## Github (stan-dev/rstan@ae36e6fibrary/Frameworks/R.framework/Versions/4.0/Resources/library "]
]
